{"ast":null,"code":"import React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport queryString from 'query-string';\nexport const geoCordStringify = (latitude, longitude) => {\n  [latitude, longitude].map(coord => {\n    if (typeof coord !== 'number') {\n      throw new Error('Entered a non-number value for geo coordinates.');\n    }\n  });\n  return `${latitude},${longitude}`;\n};\nexport const validateTravelType = type => {\n  // Google supports \"biking\", omitted for sake of compatability and user expectations\n  const TRAVEL_TYPE_ENUM = ['drive', 'walk', 'public_transport'];\n  const validType = TRAVEL_TYPE_ENUM.filter(validType => validType === type);\n\n  if (!validType) {\n    throw new Error(`Recieved ${type}, expected ${TRAVEL_TYPE_ENUM}`);\n  }\n}; // cleanObject :: {} -> {}\n// Creates a new object that removes any empty values\n\nconst cleanObject = input => {\n  return Object.keys(input).reduce((acc, key, index) => {\n    const currentValue = input[key];\n    return currentValue ? Object.assign({}, acc, {\n      [key]: currentValue\n    }) : acc;\n  }, {});\n}; // Create apple parameters\n\n\nexport const createAppleParams = params => {\n  const travelTypeMap = {\n    drive: 'd',\n    walk: 'w',\n    public_transport: 'r'\n  };\n  const map = {\n    ll: params.coords,\n    z: params.zoom,\n    dirflg: travelTypeMap[params.travelType],\n    q: params.query,\n    saddr: params.start,\n    daddr: params.end\n  };\n  return cleanObject(map);\n}; // Create google parameters\n\nexport const createGoogleParams = params => {\n  const travelTypeMap = {\n    drive: 'driving',\n    walk: 'walking',\n    public_transport: 'transit'\n  };\n  const map = {\n    origin: params.start,\n    destination: params.end,\n    travelmode: travelTypeMap[params.travelType],\n    zoom: params.zoom\n  };\n\n  if (params.navigate_mode === 'navigate') {\n    map.dir_action = 'navigate';\n  }\n\n  if (params.coords) {\n    map.center = params.coords;\n  } else {\n    map.query = params.query;\n  }\n\n  return cleanObject(map);\n}; // The map portion API is defined here essentially\n\nexport const createQueryParameters = ({\n  latitude,\n  longitude,\n  zoom = 15,\n  start = '',\n  end = '',\n  query = '',\n  navigate_mode = 'preview',\n  // preview has always being the default mode\n  travelType = 'drive'\n}) => {\n  validateTravelType(travelType);\n  const formatArguments = {\n    start,\n    end,\n    query,\n    navigate_mode,\n    travelType,\n    zoom\n  };\n\n  if (latitude && longitude) {\n    formatArguments.coords = geoCordStringify(latitude, longitude);\n  }\n\n  return {\n    apple: createAppleParams(formatArguments),\n    google: createGoogleParams(formatArguments)\n  };\n};\nexport default function open(params) {\n  createOpenLink(params)();\n}\nexport function createOpenLink({\n  provider,\n  ...params\n}) {\n  // Returns a delayed async function that opens when executed\n  if (!provider) {\n    defaultProvider = Platform.OS === 'ios' ? 'apple' : 'google';\n  }\n\n  let mapProvider = provider || defaultProvider; // Allow override provider, otherwise use the default provider\n\n  const mapLink = createMapLink({\n    provider: mapProvider,\n    ...params\n  });\n  return async () => Linking.openURL(mapLink).catch(err => console.error('An error occurred', err));\n}\nexport function createMapLink({\n  provider = 'google',\n  ...params\n}) {\n  // Assume query is first choice\n  const link = {\n    google: 'https://www.google.com/maps/search/?api=1&',\n    apple: 'http://maps.apple.com/?'\n  }; // Display if lat and longitude is specified\n\n  if (params.latitude && params.longitude) {\n    link.google = 'https://www.google.com/maps/@?api=1&map_action=map&'; // if navigate_mode is navigate with latlng params\n\n    if (params.navigate_mode === 'navigate') {\n      console.warn(\"navigate_mode='navigate' only supports 'end' prop\");\n      params['navigate_mode'] = 'preview';\n    }\n  } // Directions if start and end is present\n\n\n  if (params.end) {\n    link.google = 'https://www.google.com/maps/dir/?api=1&';\n  } // throw an error to the developer\n\n\n  if (params.start && params.navigate_mode === 'navigate') {\n    console.warn(\"navigate_mode='navigate' only supports 'end' prop\");\n  }\n\n  const queryParameters = createQueryParameters(params); // Escaped commas cause unusual error with Google map\n\n  const appleQs = queryString.stringify(queryParameters.apple).replace(/%2C/g, ',');\n  const googleQs = queryString.stringify(queryParameters.google).replace(/%2C/g, ',');\n  link.google += googleQs;\n  link.apple += appleQs;\n  return link[provider];\n}","map":{"version":3,"sources":["D:/PS/PS/app/node_modules/react-native-open-maps/index.js"],"names":["React","Linking","Platform","queryString","geoCordStringify","latitude","longitude","map","coord","Error","validateTravelType","type","TRAVEL_TYPE_ENUM","validType","filter","cleanObject","input","Object","keys","reduce","acc","key","index","currentValue","assign","createAppleParams","params","travelTypeMap","drive","walk","public_transport","ll","coords","z","zoom","dirflg","travelType","q","query","saddr","start","daddr","end","createGoogleParams","origin","destination","travelmode","navigate_mode","dir_action","center","createQueryParameters","formatArguments","apple","google","open","createOpenLink","provider","defaultProvider","OS","mapProvider","mapLink","createMapLink","openURL","catch","err","console","error","link","warn","queryParameters","appleQs","stringify","replace","googleQs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport queryString from 'query-string';\n\nexport const geoCordStringify = (latitude, longitude) => {\n\t[latitude, longitude].map(coord => {\n\t\tif (typeof coord !== 'number') {\n\t\t\tthrow new Error('Entered a non-number value for geo coordinates.');\n\t\t}\n\t});\n\n\treturn `${latitude},${longitude}`;\n}\n\nexport const validateTravelType = type => {\n\t// Google supports \"biking\", omitted for sake of compatability and user expectations\n\tconst TRAVEL_TYPE_ENUM = ['drive', 'walk', 'public_transport'];\n\tconst validType = TRAVEL_TYPE_ENUM.filter(validType => validType === type);\n\tif (!validType) {\n\t\tthrow new Error(`Recieved ${type}, expected ${TRAVEL_TYPE_ENUM}`);\n\t}\n}\n\n// cleanObject :: {} -> {}\n// Creates a new object that removes any empty values\nconst cleanObject = input => {\n\treturn Object.keys(input).reduce((acc, key, index,)=> {\n\t\tconst currentValue = input[key];\n\t\treturn (currentValue) ?\n\t\t\tObject.assign({}, acc, { [key]: currentValue }) : acc;\n\t}, {});\n}\n\n// Create apple parameters\nexport const createAppleParams = params => {\n\tconst travelTypeMap = {\n\t\tdrive: 'd',\n\t\twalk: 'w',\n\t\tpublic_transport: 'r'\n\t};\n\n\tconst map = {\n\t\tll: params.coords,\n\t\tz: params.zoom,\n\t\tdirflg: travelTypeMap[params.travelType],\n\t\tq: params.query,\n\t\tsaddr: params.start,\n\t\tdaddr: params.end\n\t}\n\n\treturn cleanObject(map);\n}\n\n// Create google parameters\nexport const createGoogleParams = params => {\n\tconst travelTypeMap = {\n\t\tdrive: 'driving',\n\t\twalk: 'walking',\n\t\tpublic_transport: 'transit'\n\t};\n\n\tconst map = {\n\t\torigin: params.start,\n\t\tdestination: params.end,\n\t\ttravelmode: travelTypeMap[params.travelType],\n\t\tzoom: params.zoom\n\t};\n\n\tif (params.navigate_mode === 'navigate') {\n\t\tmap.dir_action = 'navigate'\n\t}\n\n\tif (params.coords) {\n\t\tmap.center = params.coords;\n\t} else {\n\t\tmap.query = params.query;\n\t}\n\n\treturn cleanObject(map);\n}\n\n// The map portion API is defined here essentially\nexport const createQueryParameters = ({\n\tlatitude,\n\tlongitude,\n\tzoom = 15,\n\tstart = '',\n\tend = '',\n\tquery = '',\n\tnavigate_mode = 'preview', // preview has always being the default mode\n\ttravelType = 'drive'\n}) => {\n\tvalidateTravelType(travelType);\n\n\tconst formatArguments = {\n\t\tstart,\n\t\tend,\n\t\tquery,\n\t\tnavigate_mode,\n\t\ttravelType,\n\t\tzoom\n\t}\n\t\n\tif (latitude && longitude) {\n\t\tformatArguments.coords = geoCordStringify(latitude, longitude);\n\t}\n\n\treturn {\n\t\tapple: createAppleParams(formatArguments),\n\t\tgoogle: createGoogleParams(formatArguments)\n\t}\n};\n\nexport default function open(params) {\n\tcreateOpenLink(params)();\n}\n\nexport function createOpenLink({ provider, ...params }) {\n\t// Returns a delayed async function that opens when executed\n\tif (!provider) {\n\t\tdefaultProvider = (Platform.OS === 'ios') ? 'apple' : 'google';\n\t}\n\n\tlet mapProvider = provider || defaultProvider;\n\t// Allow override provider, otherwise use the default provider\n\tconst mapLink = createMapLink({ provider: mapProvider, ...params });\n\treturn async () => Linking.openURL(mapLink).catch(err => console.error('An error occurred', err));\n}\n\nexport function createMapLink({\n\tprovider = 'google',\n\t...params\n}) {\n\t// Assume query is first choice\n\tconst link = {\n\t\tgoogle: 'https://www.google.com/maps/search/?api=1&',\n\t\tapple: 'http://maps.apple.com/?'\n\t};\n\t\n\t// Display if lat and longitude is specified\n\tif (params.latitude && params.longitude) {\n\t\tlink.google = 'https://www.google.com/maps/@?api=1&map_action=map&';\n\n\t\t// if navigate_mode is navigate with latlng params\n\t\tif (params.navigate_mode === 'navigate') {\n\t\t\tconsole.warn(\"navigate_mode='navigate' only supports 'end' prop\")\n\t\t\tparams['navigate_mode'] = 'preview';\n\t\t}\n\t}\n\n\t// Directions if start and end is present\n\tif (params.end) {\n\t\tlink.google = 'https://www.google.com/maps/dir/?api=1&';\n\t}\n\n\t// throw an error to the developer\n\tif (params.start && params.navigate_mode === 'navigate') {\n\t\tconsole.warn(\"navigate_mode='navigate' only supports 'end' prop\")\n\t}\n\n\tconst queryParameters = createQueryParameters(params);\n\t// Escaped commas cause unusual error with Google map\n\tconst appleQs = queryString.stringify(queryParameters.apple).replace(/%2C/g, ',');\n\tconst googleQs = queryString.stringify(queryParameters.google).replace(/%2C/g, ',');\n\n\tlink.google += googleQs;\n\tlink.apple  += appleQs;\n\n\treturn link[provider];\n}\n"]},"metadata":{},"sourceType":"module"}