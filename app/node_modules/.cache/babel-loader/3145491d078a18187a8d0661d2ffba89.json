{"ast":null,"code":"var _jsxFileName = \"D:\\\\BMI\\\\bmi-app\\\\src\\\\components\\\\LinearChart.js\";\nChart.defaults.global.defaultFontFamily = \"Roboto, sans-serif\"; // Data generation\n\nfunction getRandomArray(numItems) {\n  // Create random array of objects\n  let names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let data = [];\n\n  for (var i = 0; i < numItems; i++) {\n    data.push({\n      label: names[i],\n      value: Math.round(20 + 80 * Math.random())\n    });\n  }\n\n  return data;\n}\n\nfunction getRandomDateArray(numItems) {\n  // Create random array of objects (with date)\n  let data = [];\n  let baseTime = new Date('2018-05-01T00:00:00').getTime();\n  let dayMs = 24 * 60 * 60 * 1000;\n\n  for (var i = 0; i < numItems; i++) {\n    data.push({\n      time: new Date(baseTime + i * dayMs),\n      value: Math.round(20 + 80 * Math.random())\n    });\n  }\n\n  return data;\n}\n\nfunction getData() {\n  let data = [];\n  data.push({\n    title: 'Visits',\n    data: getRandomDateArray(150)\n  });\n  data.push({\n    title: 'Categories',\n    data: getRandomArray(20)\n  });\n  data.push({\n    title: 'Categories',\n    data: getRandomArray(10)\n  });\n  data.push({\n    title: 'Data 4',\n    data: getRandomArray(6)\n  });\n  return data;\n} // BarChart\n\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.data.map(d => d.label);\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.canvasRef.current, {\n      type: 'bar',\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              min: 0,\n              max: 100\n            }\n          }]\n        }\n      },\n      data: {\n        labels: this.props.data.map(d => d.label),\n        datasets: [{\n          label: this.props.title,\n          data: this.props.data.map(d => d.value),\n          backgroundColor: this.props.color\n        }]\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    });\n  }\n\n} // LineChart\n\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.data.map(d => d.time);\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.canvasRef.current, {\n      type: 'line',\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'week'\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              min: 0\n            }\n          }]\n        }\n      },\n      data: {\n        labels: this.props.data.map(d => d.time),\n        datasets: [{\n          label: this.props.title,\n          data: this.props.data.map(d => d.value),\n          fill: 'none',\n          backgroundColor: this.props.color,\n          pointRadius: 2,\n          borderColor: this.props.color,\n          borderWidth: 1,\n          lineTension: 0\n        }]\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 12\n      }\n    });\n  }\n\n} // Doughnut\n\n\nclass DoughnutChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.data.map(d => d.label);\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.canvasRef.current, {\n      type: 'doughnut',\n      options: {\n        maintainAspectRatio: false\n      },\n      data: {\n        labels: this.props.data.map(d => d.label),\n        datasets: [{\n          data: this.props.data.map(d => d.value),\n          backgroundColor: this.props.colors\n        }]\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 12\n      }\n    });\n  }\n\n} // App\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: getData()\n    };\n  }\n\n  componentDidMount() {\n    window.setInterval(() => {\n      this.setState({\n        data: getData()\n      });\n    }, 5000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main chart-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      data: this.state.data[0].data,\n      title: this.state.data[0].title,\n      color: \"#3E517A\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sub chart-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BarChart, {\n      data: this.state.data[1].data,\n      title: this.state.data[1].title,\n      color: \"#70CAD1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sub chart-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BarChart, {\n      data: this.state.data[2].data,\n      title: this.state.data[2].title,\n      color: \"#B08EA2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sub chart-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DoughnutChart, {\n      data: this.state.data[3].data,\n      title: this.state.data[3].title,\n      colors: ['#a8e0ff', '#8ee3f5', '#70cad1', '#3e517a', '#b08ea2', '#BBB6DF'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["D:/BMI/bmi-app/src/components/LinearChart.js"],"names":["Chart","defaults","global","defaultFontFamily","getRandomArray","numItems","names","data","i","push","label","value","Math","round","random","getRandomDateArray","baseTime","Date","getTime","dayMs","time","getData","title","BarChart","React","Component","constructor","props","canvasRef","createRef","componentDidUpdate","myChart","labels","map","d","datasets","update","componentDidMount","current","type","options","maintainAspectRatio","scales","yAxes","ticks","min","max","backgroundColor","color","render","LineChart","xAxes","unit","fill","pointRadius","borderColor","borderWidth","lineTension","DoughnutChart","colors","App","state","window","setInterval","setState","ReactDOM","document","getElementById"],"mappings":";AAAAA,KAAK,CAACC,QAAN,CAAeC,MAAf,CAAsBC,iBAAtB,GAA0C,oBAA1C,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAChC;AACA,MAAIC,KAAK,GAAG,4BAAZ;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAnB,EAA6BG,CAAC,EAA9B,EAAkC;AAChCD,IAAAA,IAAI,CAACE,IAAL,CAAU;AACRC,MAAAA,KAAK,EAAEJ,KAAK,CAACE,CAAD,CADJ;AAERG,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAK,KAAKD,IAAI,CAACE,MAAL,EAArB;AAFC,KAAV;AAID;;AACD,SAAOP,IAAP;AACD;;AAED,SAASQ,kBAAT,CAA4BV,QAA5B,EAAsC;AACpC;AACA,MAAIE,IAAI,GAAG,EAAX;AACA,MAAIS,QAAQ,GAAG,IAAIC,IAAJ,CAAS,qBAAT,EAAgCC,OAAhC,EAAf;AACA,MAAIC,KAAK,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAA3B;;AACA,OAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAnB,EAA6BG,CAAC,EAA9B,EAAkC;AAChCD,IAAAA,IAAI,CAACE,IAAL,CAAU;AACRW,MAAAA,IAAI,EAAE,IAAIH,IAAJ,CAASD,QAAQ,GAAGR,CAAC,GAAGW,KAAxB,CADE;AAERR,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAK,KAAKD,IAAI,CAACE,MAAL,EAArB;AAFC,KAAV;AAID;;AACD,SAAOP,IAAP;AACD;;AAED,SAASc,OAAT,GAAmB;AACjB,MAAId,IAAI,GAAG,EAAX;AAEAA,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRa,IAAAA,KAAK,EAAE,QADC;AAERf,IAAAA,IAAI,EAAEQ,kBAAkB,CAAC,GAAD;AAFhB,GAAV;AAKAR,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRa,IAAAA,KAAK,EAAE,YADC;AAERf,IAAAA,IAAI,EAAEH,cAAc,CAAC,EAAD;AAFZ,GAAV;AAKAG,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRa,IAAAA,KAAK,EAAE,YADC;AAERf,IAAAA,IAAI,EAAEH,cAAc,CAAC,EAAD;AAFZ,GAAV;AAKAG,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRa,IAAAA,KAAK,EAAE,QADC;AAERf,IAAAA,IAAI,EAAEH,cAAc,CAAC,CAAD;AAFZ,GAAV;AAKA,SAAOG,IAAP;AACD,C,CAGD;;;AACA,MAAMgB,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBJ,KAAK,CAACK,SAAN,EAAjB;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,OAAL,CAAaxB,IAAb,CAAkByB,MAAlB,GAA2B,KAAKL,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACxB,KAA3B,CAA3B;AACA,SAAKqB,OAAL,CAAaxB,IAAb,CAAkB4B,QAAlB,CAA2B,CAA3B,EAA8B5B,IAA9B,GAAqC,KAAKoB,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACvB,KAA3B,CAArC;AACA,SAAKoB,OAAL,CAAaK,MAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,OAAL,GAAe,IAAI/B,KAAJ,CAAU,KAAK4B,SAAL,CAAeU,OAAzB,EAAkC;AAC/CC,MAAAA,IAAI,EAAE,KADyC;AAE/CC,MAAAA,OAAO,EAAE;AACRC,QAAAA,mBAAmB,EAAE,KADb;AAEPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,KAAK,EAAE;AACLC,cAAAA,GAAG,EAAE,CADA;AAELC,cAAAA,GAAG,EAAE;AAFA;AADT,WADK;AADD;AAFD,OAFsC;AAe/CvC,MAAAA,IAAI,EAAE;AACJyB,QAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACxB,KAA3B,CADJ;AAEJyB,QAAAA,QAAQ,EAAE,CAAC;AACTzB,UAAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWL,KADT;AAETf,UAAAA,IAAI,EAAE,KAAKoB,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACvB,KAA3B,CAFG;AAGToC,UAAAA,eAAe,EAAE,KAAKpB,KAAL,CAAWqB;AAHnB,SAAD;AAFN;AAfyC,KAAlC,CAAf;AAwBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACI;AAAQ,MAAA,GAAG,EAAE,KAAKrB,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGD;;AA3CoC,C,CA+CvC;;;AACA,MAAMsB,SAAN,SAAwB1B,KAAK,CAACC,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBJ,KAAK,CAACK,SAAN,EAAjB;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,OAAL,CAAaxB,IAAb,CAAkByB,MAAlB,GAA2B,KAAKL,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACd,IAA3B,CAA3B;AACA,SAAKW,OAAL,CAAaxB,IAAb,CAAkB4B,QAAlB,CAA2B,CAA3B,EAA8B5B,IAA9B,GAAqC,KAAKoB,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACvB,KAA3B,CAArC;AACA,SAAKoB,OAAL,CAAaK,MAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,OAAL,GAAe,IAAI/B,KAAJ,CAAU,KAAK4B,SAAL,CAAeU,OAAzB,EAAkC;AAC/CC,MAAAA,IAAI,EAAE,MADyC;AAE/CC,MAAAA,OAAO,EAAE;AACVC,QAAAA,mBAAmB,EAAE,KADX;AAEPC,QAAAA,MAAM,EAAE;AACNS,UAAAA,KAAK,EAAE,CACL;AACEZ,YAAAA,IAAI,EAAE,MADR;AAEEnB,YAAAA,IAAI,EAAE;AACJgC,cAAAA,IAAI,EAAE;AADF;AAFR,WADK,CADD;AASNT,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,KAAK,EAAE;AACLC,cAAAA,GAAG,EAAE;AADA;AADT,WADK;AATD;AAFD,OAFsC;AAsB/CtC,MAAAA,IAAI,EAAE;AACJyB,QAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACd,IAA3B,CADJ;AAEJe,QAAAA,QAAQ,EAAE,CAAC;AACTzB,UAAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWL,KADT;AAETf,UAAAA,IAAI,EAAE,KAAKoB,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACvB,KAA3B,CAFG;AAGT0C,UAAAA,IAAI,EAAE,MAHG;AAITN,UAAAA,eAAe,EAAE,KAAKpB,KAAL,CAAWqB,KAJnB;AAKTM,UAAAA,WAAW,EAAE,CALJ;AAMTC,UAAAA,WAAW,EAAE,KAAK5B,KAAL,CAAWqB,KANf;AAOTQ,UAAAA,WAAW,EAAE,CAPJ;AAQTC,UAAAA,WAAW,EAAE;AARJ,SAAD;AAFN;AAtByC,KAAlC,CAAf;AAoCD;;AAEDR,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,GAAG,EAAE,KAAKrB,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AArDqC,C,CAyDxC;;;AACA,MAAM8B,aAAN,SAA4BlC,KAAK,CAACC,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBJ,KAAK,CAACK,SAAN,EAAjB;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,OAAL,CAAaxB,IAAb,CAAkByB,MAAlB,GAA2B,KAAKL,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACxB,KAA3B,CAA3B;AACA,SAAKqB,OAAL,CAAaxB,IAAb,CAAkB4B,QAAlB,CAA2B,CAA3B,EAA8B5B,IAA9B,GAAqC,KAAKoB,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACvB,KAA3B,CAArC;AACA,SAAKoB,OAAL,CAAaK,MAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,OAAL,GAAe,IAAI/B,KAAJ,CAAU,KAAK4B,SAAL,CAAeU,OAAzB,EAAkC;AAC/CC,MAAAA,IAAI,EAAE,UADyC;AAE/CC,MAAAA,OAAO,EAAE;AACRC,QAAAA,mBAAmB,EAAE;AADb,OAFsC;AAK/ClC,MAAAA,IAAI,EAAE;AACJyB,QAAAA,MAAM,EAAE,KAAKL,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACxB,KAA3B,CADJ;AAEJyB,QAAAA,QAAQ,EAAE,CAAC;AACT5B,UAAAA,IAAI,EAAE,KAAKoB,KAAL,CAAWpB,IAAX,CAAgB0B,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACvB,KAA3B,CADG;AAEToC,UAAAA,eAAe,EAAE,KAAKpB,KAAL,CAAWgC;AAFnB,SAAD;AAFN;AALyC,KAAlC,CAAf;AAcD;;AAGDV,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,GAAG,EAAE,KAAKrB,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAhCyC,C,CAoC5C;;;AACA,MAAMgC,GAAN,SAAkBpC,KAAK,CAACC,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKkC,KAAL,GAAa;AACXtD,MAAAA,IAAI,EAAEc,OAAO;AADF,KAAb;AAGD;;AAEDgB,EAAAA,iBAAiB,GAAG;AAClByB,IAAAA,MAAM,CAACC,WAAP,CAAmB,MAAM;AACvB,WAAKC,QAAL,CAAc;AACZzD,QAAAA,IAAI,EAAEc,OAAO;AADD,OAAd;AAGD,KAJD,EAIG,IAJH;AAKD;;AAED4B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBA,IAD3B;AAEE,MAAA,KAAK,EAAE,KAAKsD,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBe,KAF5B;AAGE,MAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAQE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAE,KAAKuC,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBA,IAD3B;AAEE,MAAA,KAAK,EAAE,KAAKsD,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBe,KAF5B;AAGE,MAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CARF,eAeE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAE,KAAKuC,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBA,IAD3B;AAEE,MAAA,KAAK,EAAE,KAAKsD,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBe,KAF5B;AAGE,MAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAfF,eAsBE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AACE,MAAA,IAAI,EAAE,KAAKuC,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBA,IAD3B;AAEE,MAAA,KAAK,EAAE,KAAKsD,KAAL,CAAWtD,IAAX,CAAgB,CAAhB,EAAmBe,KAF5B;AAGE,MAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAtBF,CADF;AAgCD;;AAlD+B;;AAqDlC2C,QAAQ,CAAChB,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBiB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["Chart.defaults.global.defaultFontFamily = \"Roboto, sans-serif\";\r\n\r\n// Data generation\r\nfunction getRandomArray(numItems) {\r\n  // Create random array of objects\r\n  let names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  let data = [];\r\n  for(var i = 0; i < numItems; i++) {\r\n    data.push({\r\n      label: names[i],\r\n      value: Math.round(20 + 80 * Math.random())\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getRandomDateArray(numItems) {\r\n  // Create random array of objects (with date)\r\n  let data = [];\r\n  let baseTime = new Date('2018-05-01T00:00:00').getTime();\r\n  let dayMs = 24 * 60 * 60 * 1000;\r\n  for(var i = 0; i < numItems; i++) {\r\n    data.push({\r\n      time: new Date(baseTime + i * dayMs),\r\n      value: Math.round(20 + 80 * Math.random())\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getData() {\r\n  let data = [];\r\n\r\n  data.push({\r\n    title: 'Visits',\r\n    data: getRandomDateArray(150)\r\n  });\r\n\r\n  data.push({\r\n    title: 'Categories',\r\n    data: getRandomArray(20)\r\n  });\r\n\r\n  data.push({\r\n    title: 'Categories',\r\n    data: getRandomArray(10)\r\n  });\r\n\r\n  data.push({\r\n    title: 'Data 4',\r\n    data: getRandomArray(6)\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\n\r\n// BarChart\r\nclass BarChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.label);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\r\n    this.myChart.update();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'bar',\r\n      options: {\r\n\t      maintainAspectRatio: false,\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      data: {\r\n        labels: this.props.data.map(d => d.label),\r\n        datasets: [{\r\n          label: this.props.title,\r\n          data: this.props.data.map(d => d.value),\r\n          backgroundColor: this.props.color\r\n        }]\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <canvas ref={this.canvasRef} />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// LineChart\r\nclass LineChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.time);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\r\n    this.myChart.update();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'line',\r\n      options: {\r\n\t\t\t  maintainAspectRatio: false,\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'week'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      data: {\r\n        labels: this.props.data.map(d => d.time),\r\n        datasets: [{\r\n          label: this.props.title,\r\n          data: this.props.data.map(d => d.value),\r\n          fill: 'none',\r\n          backgroundColor: this.props.color,\r\n          pointRadius: 2,\r\n          borderColor: this.props.color,\r\n          borderWidth: 1,\r\n          lineTension: 0\r\n        }]\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <canvas ref={this.canvasRef} />;\r\n  }\r\n}\r\n\r\n\r\n// Doughnut\r\nclass DoughnutChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.label);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.value);\r\n    this.myChart.update();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.canvasRef.current, {\r\n      type: 'doughnut',\r\n      options: {\r\n\t      maintainAspectRatio: false\r\n      },\r\n      data: {\r\n        labels: this.props.data.map(d => d.label),\r\n        datasets: [{\r\n          data: this.props.data.map(d => d.value),\r\n          backgroundColor: this.props.colors\r\n        }]\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return <canvas ref={this.canvasRef} />;\r\n  }\r\n}\r\n\r\n\r\n// App\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: getData()\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.setInterval(() => {\r\n      this.setState({\r\n        data: getData()\r\n      })\r\n    }, 5000)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"main chart-wrapper\">\r\n          <LineChart\r\n            data={this.state.data[0].data}\r\n            title={this.state.data[0].title}\r\n            color=\"#3E517A\"\r\n          />\r\n        </div>\r\n        <div className=\"sub chart-wrapper\">\r\n          <BarChart\r\n            data={this.state.data[1].data}\r\n            title={this.state.data[1].title}\r\n            color=\"#70CAD1\"\r\n          />\r\n        </div>\r\n        <div className=\"sub chart-wrapper\">\r\n          <BarChart\r\n            data={this.state.data[2].data}\r\n            title={this.state.data[2].title}\r\n            color=\"#B08EA2\"\r\n          />\r\n        </div>\r\n        <div className=\"sub chart-wrapper\">\r\n          <DoughnutChart\r\n            data={this.state.data[3].data}\r\n            title={this.state.data[3].title}\r\n            colors={['#a8e0ff', '#8ee3f5', '#70cad1', '#3e517a', '#b08ea2', '#BBB6DF']}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}