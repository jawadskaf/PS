{"ast":null,"code":"import { getHealthcareProduct, deleteHealthcareProduct, addHealthcareProduct, updateHealthcareProduct } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_HEALTHCARE_STARTED = 'GET_HEALTHCARE_STARTED';\nexport const GET_HEALTHCARE_SUCCESS = 'GET_HEALTHCARE_SUCCESS';\nexport const GET_HEALTHCARE_ERROR = 'GET_HEALTHCARE_ERROR';\nexport const CREATE_HEALTHCARE_STARTED = 'CREATE_HEALTHCARE_STARTED';\nexport const CREATE_HEALTHCARE_SUCCESS = 'CREATE_HEALTHCARE_SUCCESS';\nexport const CREATE_HEALTHCARE_ERROR = 'CREATE_HEALTHCARE_ERROR';\nexport const DELETE_HEALTHCARE_SUCCESS = 'DELETE_HEALTHCARE_SUCCESS';\nexport const DELETE_HEALTHCARE_STARTED = 'DELETE_HEALTHCARE_STARTED';\nexport const DELETE_HEALTHCARE_ERROR = 'DELETE_HEALTHCARE_ERROR';\nexport const UPDATE_HEALTHCARE_SUCCESS = 'UPDATE_HEALTHCARE_SUCCESS';\nexport const UPDATE_HEALTHCARE_STARTED = 'UPDATE_HEALTHCARE_STARTED';\nexport const UPDATE_HEALTHCARE_ERROR = 'UPDATE_HEALTHCARE_ERROR';\nconst healthcareActions = {\n  getHealthcareProduct: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_HEALTHCARE_STARTED\n      });\n      let response = await getHealthcareProduct();\n      dispatch({\n        type: GET_HEALTHCARE_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING HEALTHCARE' + error);\n      dispatch({\n        type: GET_HEALTHCARE_ERROR\n      });\n    }\n  },\n  deleteHealthcareProduct: data => async dispatch => {\n    try {\n      dispatch({\n        type: DELETE_HEALTHCARE_STARTED\n      });\n      await deleteHealthcareProduct(data);\n      dispatch({\n        type: DELETE_HEALTHCARE_SUCCESS,\n        payload: {\n          message: 'HEALTHCARE deleted successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_HEALTHCARE_ERROR\n      });\n    }\n  },\n  addHealthcareProduct: data => async dispatch => {\n    try {\n      dispatch({\n        type: CREATE_HEALTHCARE_STARTED\n      });\n      await addHealthcareProduct(data);\n      dispatch({\n        type: CREATE_HEALTHCARE_SUCCESS,\n        payload: {\n          message: 'HEALTHCARE added successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: CREATE_HEALTHCARE_ERROR,\n        payload: {\n          message: 'failed to add HEALTHCARE!'\n        }\n      });\n    }\n  },\n  updateHealthcareProduct: data => async dispatch => {\n    try {\n      dispatch({\n        type: UPDATE_HEALTHCARE_STARTED\n      });\n      await updateHealthcareProduct(data);\n      dispatch({\n        type: UPDATE_HEALTHCARE_SUCCESS,\n        payload: {\n          message: 'HEALTHCARE updated successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: UPDATE_HEALTHCARE_ERROR,\n        payload: {\n          message: 'failed to update HEALTHCARE!'\n        }\n      });\n    }\n  }\n};\nexport default healthcareActions;","map":{"version":3,"sources":["D:/JawadsPharmacy/csis279-app/src/redux/actions/healthcare.js"],"names":["getHealthcareProduct","deleteHealthcareProduct","addHealthcareProduct","updateHealthcareProduct","toast","GET_HEALTHCARE_STARTED","GET_HEALTHCARE_SUCCESS","GET_HEALTHCARE_ERROR","CREATE_HEALTHCARE_STARTED","CREATE_HEALTHCARE_SUCCESS","CREATE_HEALTHCARE_ERROR","DELETE_HEALTHCARE_SUCCESS","DELETE_HEALTHCARE_STARTED","DELETE_HEALTHCARE_ERROR","UPDATE_HEALTHCARE_SUCCESS","UPDATE_HEALTHCARE_STARTED","UPDATE_HEALTHCARE_ERROR","healthcareActions","dispatch","type","response","payload","data","error","message","err"],"mappings":"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","sourcesContent":["import { getHealthcareProduct, deleteHealthcareProduct, addHealthcareProduct,updateHealthcareProduct } from '../../actions/actions';\r\nimport { toast } from 'react-toastify'\r\n\r\nexport const GET_HEALTHCARE_STARTED = 'GET_HEALTHCARE_STARTED'\r\nexport const GET_HEALTHCARE_SUCCESS = 'GET_HEALTHCARE_SUCCESS'\r\nexport const GET_HEALTHCARE_ERROR = 'GET_HEALTHCARE_ERROR'\r\n\r\nexport const CREATE_HEALTHCARE_STARTED = 'CREATE_HEALTHCARE_STARTED'\r\nexport const CREATE_HEALTHCARE_SUCCESS = 'CREATE_HEALTHCARE_SUCCESS'\r\nexport const CREATE_HEALTHCARE_ERROR = 'CREATE_HEALTHCARE_ERROR'\r\n\r\nexport const DELETE_HEALTHCARE_SUCCESS = 'DELETE_HEALTHCARE_SUCCESS'\r\nexport const DELETE_HEALTHCARE_STARTED = 'DELETE_HEALTHCARE_STARTED'\r\nexport const DELETE_HEALTHCARE_ERROR = 'DELETE_HEALTHCARE_ERROR'\r\n\r\nexport const UPDATE_HEALTHCARE_SUCCESS = 'UPDATE_HEALTHCARE_SUCCESS'\r\nexport const UPDATE_HEALTHCARE_STARTED = 'UPDATE_HEALTHCARE_STARTED'\r\nexport const UPDATE_HEALTHCARE_ERROR = 'UPDATE_HEALTHCARE_ERROR'\r\n\r\nconst healthcareActions = {\r\n\r\n  getHealthcareProduct: () => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: GET_HEALTHCARE_STARTED,\r\n      });\r\n      let response = await getHealthcareProduct()\r\n      dispatch({\r\n        type: GET_HEALTHCARE_SUCCESS,\r\n        payload: {\r\n          data: response,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      toast.error('ERROR GETTING HEALTHCARE' + error)\r\n      dispatch({\r\n        type: GET_HEALTHCARE_ERROR,\r\n      });\r\n    }\r\n  },\r\n  deleteHealthcareProduct: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: DELETE_HEALTHCARE_STARTED,\r\n      });\r\n      await deleteHealthcareProduct(data);\r\n      dispatch({\r\n        type: DELETE_HEALTHCARE_SUCCESS,\r\n        payload: {\r\n          message: 'HEALTHCARE deleted successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_HEALTHCARE_ERROR,\r\n      })\r\n    }\r\n  },\r\n  addHealthcareProduct: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: CREATE_HEALTHCARE_STARTED,\r\n      });\r\n      await addHealthcareProduct(data);\r\n      dispatch({\r\n        type: CREATE_HEALTHCARE_SUCCESS,\r\n        payload: {\r\n          message: 'HEALTHCARE added successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_HEALTHCARE_ERROR,\r\n        payload: {\r\n          message: 'failed to add HEALTHCARE!',\r\n        }\r\n      })\r\n    }\r\n  },\r\n  updateHealthcareProduct: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: UPDATE_HEALTHCARE_STARTED,\r\n      });\r\n      await updateHealthcareProduct(data);\r\n      dispatch({\r\n        type: UPDATE_HEALTHCARE_SUCCESS,\r\n        payload: {\r\n          message: 'HEALTHCARE updated successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_HEALTHCARE_ERROR,\r\n        payload: {\r\n          message: 'failed to update HEALTHCARE!',\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default healthcareActions;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}