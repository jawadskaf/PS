{"ast":null,"code":"import { addImage, getImage } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const CREATE_IMAGE_STARTED = 'CREATE_IMAGE_STARTED';\nexport const CREATE_IMAGE_SUCCESS = 'CREATE_IMAGE_SUCCESS';\nexport const CREATE_IMAGE_ERROR = 'CREATE_IMAGE_ERROR';\nexport const GET_IMAGE_STARTED = 'GET_IMAGE_STARTED';\nexport const GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS';\nexport const GET_IMAGE_ERROR = 'GET_IMAGE_ERROR';\nconst imageActions = {\n  getImage: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_IMAGE_STARTED\n      });\n      let response = await getImage();\n      dispatch({\n        type: GET_IMAGE_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING HEALTHCARE' + error);\n      dispatch({\n        type: GET_IMAGE_ERROR\n      });\n    }\n  },\n  addImage: data => async dispatch => {\n    try {\n      dispatch({\n        type: CREATE_IMAGE_STARTED\n      });\n      await addImage(data);\n      dispatch({\n        type: CREATE_IMAGE_SUCCESS,\n        payload: {\n          message: 'IMAGE added successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: CREATE_IMAGE_ERROR,\n        payload: {\n          message: 'failed to add HEALTHCARE!'\n        }\n      });\n    }\n  }\n};\nexport default imageActions;","map":{"version":3,"sources":["D:/PS/PS/app/src/redux/actions/image.js"],"names":["addImage","getImage","toast","CREATE_IMAGE_STARTED","CREATE_IMAGE_SUCCESS","CREATE_IMAGE_ERROR","GET_IMAGE_STARTED","GET_IMAGE_SUCCESS","GET_IMAGE_ERROR","imageActions","dispatch","type","response","payload","data","error","message","err"],"mappings":"AAAA,SAASA,QAAT,EAAkBC,QAAlB,QAAkC,uBAAlC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAKA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAIP,MAAMC,YAAY,GAAG;AAEjBR,EAAAA,QAAQ,EAAE,MAAM,MAAOS,QAAP,IAAoB;AAChC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL;AADC,OAAD,CAAR;AAGA,UAAIM,QAAQ,GAAG,MAAMX,QAAQ,EAA7B;AACAS,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,iBADC;AAEPM,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEF;AADC;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOG,KAAP,EAAc;AACdb,MAAAA,KAAK,CAACa,KAAN,CAAY,6BAA6BA,KAAzC;AACAL,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH;AADC,OAAD,CAAR;AAGD;AACF,GApBc;AAsBnBR,EAAAA,QAAQ,EAAGc,IAAD,IAAU,MAAOJ,QAAP,IAAoB;AACtC,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER;AADC,OAAD,CAAR;AAGA,YAAMH,QAAQ,CAACc,IAAD,CAAd;AACAJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,oBADC;AAEPS,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMD,KAXD,CAWE,OAAOC,GAAP,EAAY;AACZP,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN,kBADC;AAEPQ,QAAAA,OAAO,EAAE;AACPG,UAAAA,OAAO,EAAE;AADF;AAFF,OAAD,CAAR;AAMD;AACF;AA1CkB,CAArB;AA6CA,eAAeP,YAAf","sourcesContent":["import { addImage,getImage } from '../../actions/actions';\r\nimport { toast } from 'react-toastify'\r\n\r\n\r\n\r\n\r\nexport const CREATE_IMAGE_STARTED = 'CREATE_IMAGE_STARTED'\r\nexport const CREATE_IMAGE_SUCCESS = 'CREATE_IMAGE_SUCCESS'\r\nexport const CREATE_IMAGE_ERROR = 'CREATE_IMAGE_ERROR'\r\n\r\nexport const GET_IMAGE_STARTED = 'GET_IMAGE_STARTED'\r\nexport const GET_IMAGE_SUCCESS = 'GET_IMAGE_SUCCESS'\r\nexport const GET_IMAGE_ERROR = 'GET_IMAGE_ERROR'\r\n\r\n\r\n\r\nconst imageActions = {\r\n\r\n    getImage: () => async (dispatch) => {\r\n        try {\r\n          dispatch({\r\n            type: GET_IMAGE_STARTED,\r\n          });\r\n          let response = await getImage()\r\n          dispatch({\r\n            type: GET_IMAGE_SUCCESS,\r\n            payload: {\r\n              data: response,\r\n            },\r\n          });\r\n        } catch (error) {\r\n          toast.error('ERROR GETTING HEALTHCARE' + error)\r\n          dispatch({\r\n            type: GET_IMAGE_ERROR,\r\n          });\r\n        }\r\n      },\r\n \r\n  addImage: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: CREATE_IMAGE_STARTED,\r\n      });\r\n      await addImage(data);\r\n      dispatch({\r\n        type: CREATE_IMAGE_SUCCESS,\r\n        payload: {\r\n          message: 'IMAGE added successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_IMAGE_ERROR,\r\n        payload: {\r\n          message: 'failed to add HEALTHCARE!',\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default imageActions;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}