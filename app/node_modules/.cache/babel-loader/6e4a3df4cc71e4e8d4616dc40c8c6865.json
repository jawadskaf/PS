{"ast":null,"code":"import { getLabTest, deleteLabTest, addLabTest, updateLabTest } from '../../actions/actions';\nimport { toast } from 'react-toastify';\nexport const GET_LAB_STARTED = 'GET_LAB_STARTED';\nexport const GET_LAB_SUCCESS = 'GET_LAB_SUCCESS';\nexport const GET_LAB_ERROR = 'GET_LAB_ERROR';\nexport const CREATE_LAB_STARTED = 'CREATE_LAB_STARTED';\nexport const CREATE_LAB_SUCCESS = 'CREATE_LAB_SUCCESS';\nexport const CREATE_LAB_ERROR = 'CREATE_LAB_ERROR';\nexport const DELETE_LAB_SUCCESS = 'DELETE_LAB_SUCCESS';\nexport const DELETE_LAB_STARTED = 'DELETE_LAB_STARTED';\nexport const DELETE_LAB_ERROR = 'DELETE_LAB_ERROR';\nexport const UPDATE_LAB_SUCCESS = 'UPDATE_LAB_SUCCESS';\nexport const UPDATE_LAB_STARTED = 'UPDATE_LAB_STARTED';\nexport const UPDATE_LAB_ERROR = 'UPDATE_LAB_ERROR';\nconst labActions = {\n  getLabTest: () => async dispatch => {\n    try {\n      dispatch({\n        type: GET_LAB_STARTED\n      });\n      let response = await getLabTest();\n      dispatch({\n        type: GET_LAB_SUCCESS,\n        payload: {\n          data: response\n        }\n      });\n    } catch (error) {\n      toast.error('ERROR GETTING LABS' + error);\n      dispatch({\n        type: GET_LAB_ERROR\n      });\n    }\n  },\n  deleteLabTest: data => async dispatch => {\n    try {\n      dispatch({\n        type: DELETE_LAB_STARTED\n      });\n      await deleteLabTest(data);\n      dispatch({\n        type: DELETE_LAB_SUCCESS,\n        payload: {\n          message: 'LAB deleted successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: DELETE_LAB_ERROR\n      });\n    }\n  },\n  addLabTest: data => async dispatch => {\n    try {\n      dispatch({\n        type: CREATE_LAB_STARTED\n      });\n      await addLabTest(data);\n      dispatch({\n        type: CREATE_LAB_SUCCESS,\n        payload: {\n          message: 'LAB added successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: CREATE_LAB_ERROR,\n        payload: {\n          message: 'failed to add LAB!'\n        }\n      });\n    }\n  },\n  updateLabTest: data => async dispatch => {\n    try {\n      dispatch({\n        type: UPDATE_LAB_STARTED\n      });\n      await updateLabTest(data);\n      dispatch({\n        type: UPDATE_LAB_SUCCESS,\n        payload: {\n          message: 'LAB updated successfully'\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: UPDATE_LAB_ERROR,\n        payload: {\n          message: 'failed to update LAB!'\n        }\n      });\n    }\n  }\n};\nexport default labActions;","map":{"version":3,"sources":["D:/JawadsPharmacy/csis279-app/src/redux/actions/lab.js"],"names":["getLabTest","deleteLabTest","addLabTest","updateLabTest","toast","GET_LAB_STARTED","GET_LAB_SUCCESS","GET_LAB_ERROR","CREATE_LAB_STARTED","CREATE_LAB_SUCCESS","CREATE_LAB_ERROR","DELETE_LAB_SUCCESS","DELETE_LAB_STARTED","DELETE_LAB_ERROR","UPDATE_LAB_SUCCESS","UPDATE_LAB_STARTED","UPDATE_LAB_ERROR","labActions","dispatch","type","response","payload","data","error","message","err"],"mappings":"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","sourcesContent":["import { getLabTest, deleteLabTest, addLabTest,updateLabTest } from '../../actions/actions';\r\nimport { toast } from 'react-toastify'\r\n\r\nexport const GET_LAB_STARTED = 'GET_LAB_STARTED'\r\nexport const GET_LAB_SUCCESS = 'GET_LAB_SUCCESS'\r\nexport const GET_LAB_ERROR = 'GET_LAB_ERROR'\r\n\r\nexport const CREATE_LAB_STARTED = 'CREATE_LAB_STARTED'\r\nexport const CREATE_LAB_SUCCESS = 'CREATE_LAB_SUCCESS'\r\nexport const CREATE_LAB_ERROR = 'CREATE_LAB_ERROR'\r\n\r\nexport const DELETE_LAB_SUCCESS = 'DELETE_LAB_SUCCESS'\r\nexport const DELETE_LAB_STARTED = 'DELETE_LAB_STARTED'\r\nexport const DELETE_LAB_ERROR = 'DELETE_LAB_ERROR'\r\n\r\nexport const UPDATE_LAB_SUCCESS = 'UPDATE_LAB_SUCCESS'\r\nexport const UPDATE_LAB_STARTED = 'UPDATE_LAB_STARTED'\r\nexport const UPDATE_LAB_ERROR = 'UPDATE_LAB_ERROR'\r\n\r\nconst labActions = {\r\n\r\n  getLabTest: () => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: GET_LAB_STARTED,\r\n      });\r\n      let response = await getLabTest()\r\n      dispatch({\r\n        type: GET_LAB_SUCCESS,\r\n        payload: {\r\n          data: response,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      toast.error('ERROR GETTING LABS' + error)\r\n      dispatch({\r\n        type: GET_LAB_ERROR,\r\n      });\r\n    }\r\n  },\r\n  deleteLabTest: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: DELETE_LAB_STARTED,\r\n      });\r\n      await deleteLabTest(data);\r\n      dispatch({\r\n        type: DELETE_LAB_SUCCESS,\r\n        payload: {\r\n          message: 'LAB deleted successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_LAB_ERROR,\r\n      })\r\n    }\r\n  },\r\n  addLabTest: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: CREATE_LAB_STARTED,\r\n      });\r\n      await addLabTest(data);\r\n      dispatch({\r\n        type: CREATE_LAB_SUCCESS,\r\n        payload: {\r\n          message: 'LAB added successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_LAB_ERROR,\r\n        payload: {\r\n          message: 'failed to add LAB!',\r\n        }\r\n      })\r\n    }\r\n  },\r\n  updateLabTest: (data) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: UPDATE_LAB_STARTED,\r\n      });\r\n      await updateLabTest(data);\r\n      dispatch({\r\n        type: UPDATE_LAB_SUCCESS,\r\n        payload: {\r\n          message: 'LAB updated successfully',\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_LAB_ERROR,\r\n        payload: {\r\n          message: 'failed to update LAB!',\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default labActions;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}